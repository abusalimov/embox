package embox.kernel.task

@DefaultImpl(single)
abstract module api {
}

@DefaultImpl(task_no_table)
abstract module task_table_api {
}

module kernel_task {
	source "kernel_task.c"

	@NoRuntime depends api
	depends task_resource // FIXME
	depends task_table_api
}

module multi extends api {
	source "multi.c", "multi.h"

	depends kernel_task
	depends task_resource
	depends task_table

	depends embox.compat.posix.proc.vfork

	depends embox.kernel.thread.core
	depends embox.kernel.sched.sched
	/* uses task_self() to initialize
	 * resources, which implies to thread be
	 * already loaded, as task_self uses
	 * thread_self to determine current thread
	 */

	@NoRuntime depends embox.compat.libc.assert.assert
	@NoRuntime depends embox.compat.libc.^string.str
}

module single extends api {
	source "single.c"
	source "single.h"

	depends kernel_task
	depends task_resource
	@NoRuntime depends embox.compat.libc.assert.assert
	@NoRuntime depends embox.compat.libc.^string.str
}

module task_no_table extends task_table_api {
	source "task_no_table.h"

	@NoRuntime depends kernel_task
	@NoRuntime depends embox.compat.libc.assert.assert
}

module task_resource {
	source "task_resource.c", "task_resource.lds.S"

	@NoRuntime depends embox.compat.libc.assert.assert
	@NoRuntime depends embox.util.array_spread.Array
}

module task_table extends task_table_api {
	option number task_table_size=32
	source "task_table.c"

	@NoRuntime depends embox.compat.libc.assert.assert
}

