package embox.kernel.task.resource

module errno {
	source "errno.c"

	depends embox.kernel.task.task_resource
	@NoRuntime depends embox.compat.libc.assert.assert
}

module idesc_table {
	option number idesc_table_size=64
	source "idesc_table.c", "idesc_table.h"

	depends embox.fs.idesc
	depends embox.kernel.task.task_resource
	@NoRuntime depends embox.kernel.task.idesc.idesc
	@NoRuntime depends embox.compat.libc.assert.assert
}

module mmap {
	source "mmap.c"

	depends embox.kernel.task.task_resource
	@NoRuntime depends embox.mem.mmap.mmap_api
	@NoRuntime depends embox.compat.libc.assert.assert
}

module mmap_notify {
	source "mmap_notify.c"

	@NoRuntime depends embox.arch.mmu
	@NoRuntime depends embox.kernel.task.task_resource
	@NoRuntime depends embox.mem.mmap.mmap_api
	@NoRuntime depends embox.compat.libc.assert.assert
}

module module_ptr {
	source "module_ptr.c"
}

module vfs {
	source "vfs.c"
	depends embox.fs.dvfs.dvfs
}

module security {
	option number security_size
	source "security.c"

	depends embox.kernel.task.task_resource
	@NoRuntime depends embox.compat.libc.assert.assert
	@NoRuntime depends embox.compat.libc.^string.str
}

module sig_table {
	source "sig_table.c"

	depends embox.kernel.task.task_resource
	@NoRuntime depends embox.compat.libc.assert.assert
	@NoRuntime depends embox.compat.libc.^string.str
}

module thread_key_table {
	source "thread_key_table.c", "thread_key_table.h"

	depends embox.kernel.task.task_resource
	@NoRuntime depends embox.kernel.thread.sync.mutex
	@NoRuntime depends embox.kernel.thread.thread_local
	@NoRuntime depends embox.compat.libc.assert.assert
	@NoRuntime depends embox.util.indexator
}

