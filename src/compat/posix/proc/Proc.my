
package embox.compat.posix.proc

module All {

	depends exec,
		//vfork,
		//waitpid,
		//signal,
		exit,
		uid,
		nice,
		priority,
		pid
}

@DefaultImpl(embox.compat.posix.proc.vfork_none.exec_stub)
abstract module exec_lib { }


static module exec {
	source "exec.c"
	depends vfork
	depends exec_lib
	depends embox.kernel.task.resource.module_ptr
	depends embox.kernel.task.resource.argv.argv

	depends embox.cmds.shell.shell_registry
}

@DefaultImpl(embox.compat.posix.proc.fork_nommu.fork_copy_everything)
abstract module fork { }

static module vfork_entry {
	source "vfork.c"

	depends embox.kernel.task.resource.argv.argv
	depends embox.kernel.task.resource.vfork.vfork
}

@DefaultImpl(embox.compat.posix.proc.vfork_none.vfork_stub)
abstract module vfork { }

static module waitpid {
	source "waitpid.c"

	depends embox.util.LibUtil
	depends embox.kernel.task.syslib.waitpid
}

static module signal {
	source "signal.c"

	depends embox.kernel.thread.signal_impl
	depends embox.kernel.task.resource.sig_table
	depends sigset
}

static module sigset {
	source "sigset.c"
	depends embox.util.bitmap.Bitmap
}

static module exit {
	source "exit.c"

	depends vfork
	depends exec
	depends signal
}

static module uid {
	source "uid.c"

	depends embox.kernel.task.resource.u_area.u_area
}

static module nice {
	source "nice.c"

	depends priority
}

static module priority {
	source "priority.c"

	depends embox.kernel.task.resource.u_area.u_area
}

static module pid {
	source "pid.c"
}
